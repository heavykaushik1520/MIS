/*
package com.mis.services;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.mis.entity.UserInfo;
import com.mis.repository.UserInfoRepository;

@Service
public class LoginService implements UserDetailsService {

	@Autowired
	private UserInfoRepository userInfoRepository;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
	    Optional<UserInfo> user = userInfoRepository.findByEmail(email);

	    if (user.isPresent()) {
	        UserInfo userInfoObject = user.get();
	        return User.builder()
	                .username(userInfoObject.getEmail())
	                .password(userInfoObject.getPasswordHash()) 
	                .roles(userInfoObject.getRole())

	                .build();
	    } else {
	        throw new UsernameNotFoundException(email + " does not exist");
	    }
	}

	
	
}
*/

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

@Service
public class LoginService {

    private final PasswordEncoder passwordEncoder;

    public LoginService(@Lazy PasswordEncoder passwordEncoder) {
        this.passwordEncoder = passwordEncoder;
    }

    public boolean validatePassword(String rawPassword, String encodedPassword) {
        return passwordEncoder.matches(rawPassword, encodedPassword);
    }
}

